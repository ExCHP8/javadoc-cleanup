# javadoc-cleanup: Github action for tidying up javadocs
# 
# Copyright (c) 2021 Vincent A Cicirello
# https://www.cicirello.org/
#
# MIT License
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 

import unittest
import tidyjavadocs as tidy
import os

class IntegrationTest(unittest.TestCase) :

    expectedJavadoc = """<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- GitHub action javadoc-cleanup -->
<meta name="viewport" content="width=device-width, initial-scale=1">
<!-- End javadoc-cleanup block -->
<!-- Generated by javadoc -->
<title>Overview (Some Java Library.....)</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="jquery/jquery-ui.css" title="Style">
<script type="text/javascript" src="script.js"></script>
<script type="text/javascript" src="jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="jquery/jquery-3.3.1.js"></script>
<script type="text/javascript" src="jquery/jquery-migrate-3.0.1.js"></script>
<script type="text/javascript" src="jquery/jquery-ui.js"></script>
</head>
<body>
The body of the javadocs....
</body>
</html>
"""

    expectedNonJavadoc = """<!DOCTYPE html>
<html lang=en>
<head>
<meta charset=utf-8>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="title" content="Page title....">
</head>
<body>
The body of the javadocs....
</body>
</html>
"""

    expectedJavadocCanon = """<!DOCTYPE HTML>
<!-- NewPage -->
<html lang="en">
<head>
<!-- GitHub action javadoc-cleanup -->
<link rel="canonical" href="https://TESTING.1.2.3/{0}">
<meta name="viewport" content="width=device-width, initial-scale=1">
<!-- End javadoc-cleanup block -->
<!-- Generated by javadoc -->
<title>Overview (Some Java Library.....)</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<link rel="stylesheet" type="text/css" href="jquery/jquery-ui.css" title="Style">
<script type="text/javascript" src="script.js"></script>
<script type="text/javascript" src="jquery/jszip/dist/jszip.min.js"></script>
<script type="text/javascript" src="jquery/jszip-utils/dist/jszip-utils.min.js"></script>
<!--[if IE]>
<script type="text/javascript" src="jquery/jszip-utils/dist/jszip-utils-ie.min.js"></script>
<![endif]-->
<script type="text/javascript" src="jquery/jquery-3.3.1.js"></script>
<script type="text/javascript" src="jquery/jquery-migrate-3.0.1.js"></script>
<script type="text/javascript" src="jquery/jquery-ui.js"></script>
</head>
<body>
The body of the javadocs....
</body>
</html>
"""

    def test_removetimestamp(self) :
        with open("tests/testdata/withTimestamp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadoc)

    def test_notimestamp(self) :
        with open("tests/testdata/withoutTimestamp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadoc)

    def test_alreadycleanedup(self) :
        with open("tests/testdata/alreadyCleanedUp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadoc)

    def test_removetimestamp_in_subdir(self) :
        with open("tests/testdata/subdir/withTimestamp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadoc)

    def test_notimestamp_in_subdir(self) :
        with open("tests/testdata/subdir/withoutTimestamp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadoc)

    def test_alreadycleanedup_in_subdir(self) :
        with open("tests/testdata/subdir/alreadyCleanedUp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadoc)

    def test_nonJavadoc(self) :
        with open("tests/testdata/nonJavadoc.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedNonJavadoc)

    def test_nonJavadoc_in_subdir(self) :
        with open("tests/testdata/subdir/nonJavadoc.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedNonJavadoc)

    # Tests with canonical links

    def test_removetimestamp(self) :
        with open("tests/testdatacanon/withTimestamp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadocCanon.format("withTimestamp.html"))

    def test_notimestamp(self) :
        with open("tests/testdatacanon/withoutTimestamp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadocCanon.format("withoutTimestamp.html"))

    def test_alreadycleanedup(self) :
        with open("tests/testdatacanon/alreadyCleanedUpCanon.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadocCanon.format("alreadyCleanedUpCanon.html"))

    def test_removetimestamp_in_subdir(self) :
        with open("tests/testdatacanon/subdir/withTimestamp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadocCanon.format("subdir/withTimestamp.html"))

    def test_notimestamp_in_subdir(self) :
        with open("tests/testdatacanon/subdir/withoutTimestamp.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadocCanon.format("subdir/withoutTimestamp.html"))

    def test_alreadycleanedup_in_subdir(self) :
        with open("tests/testdatacanon/subdir/alreadyCleanedUpCanon.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedJavadocCanon.format("subdir/alreadyCleanedUpCanon.html"))

    def test_nonJavadoc(self) :
        with open("tests/testdatacanon/nonJavadoc.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedNonJavadoc)

    def test_nonJavadoc_in_subdir(self) :
        with open("tests/testdatacanon/subdir/nonJavadoc.html", "r") as testfile :
            self.assertEqual(testfile.read(), IntegrationTest.expectedNonJavadoc)



    
